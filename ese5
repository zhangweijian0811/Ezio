let rec zip (l1 : 'a list) (l2 : 'b list) : ('a * 'b) list = 
          match (l1,l2) with 
            ([],[])->[]
           |(x::xs,y::ys)->(x,y)::(zip xs ys)
           |_-> failwith "Liste di lunghezza diversa"


let rec unzip (l : ('a * 'b) list) : 'a list * 'b list = 
                    match l with
                    []->([],[])
                   |(x,y)::zs->let (xs,ys)=unzip zs
                                in (x::xs,y::ys);;

let a (l:float list) :float = 
    match l with 
            []->0.0
            |[x]->x
            |x::xs->x
             
let rec max (l:float list)(n:float ) : float =  match l with
                                                  []->0.0
                                                 |[x]->if x>n then x
                                                       else n
                                                 |x::xs->if x >n then max xs x
                                                         else max xs n

let rec min (l:float list)(n:float ) :float = match l with
                                                  []->0.0
                                                 |[x]->if x<n then x
                                                       else n
                                                 |x::xs->if x<n then min xs x
                                                         else min xs n

let rec somma (l : float list)  : float = match l with 
                                             []->0.0
                                            |[x]->x
                                            |x::xs->x+ somma xs

let rec num l :float = match l with 
                        []->0.0
                       |[x]->1.0
                       |x::xs->1.0+ num xs

let statistica_lista (l : float list) =
     let n = a l
     ((min l n),(somma l)/(num l),(max l n ))
    
