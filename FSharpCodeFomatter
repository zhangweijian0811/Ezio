module FSharpCodeFormatter.Formatter

open Lib
let f (s :string )= if s.Contains"let"=true then 1
                    elif s.Contains"match"=true then 2
                    elif s.Contains"eli"=true then 5
                    elif s.Contains"if"=true then 3
                    elif s.Contains"else"=true then 4
                    elif s.Contains"in"=true then 6
                    elif s.Contains"|"=true then 7
                    else 0 


//let_n 为了知道是不是两个let连在一起
//match_n 固定接下去|[]之前的tab
//list_int per IN
//list_if per else e elif 
let rec f_a (sl:string list) (colona: int) (tab: int) (let_n: int)(match_n : int) (list_int : int list) (list_if :int list):(int list) =  
            match sl with
                 |[]-> [0]
                 |[x]->match f(x) with 
                            |4-> [tab]
                            |_-> match list_int with 
                                     |z::zs ->[z]
                                     |_->[0]
                 |x::y::xs-> match f(x) with
                                 |1->if colona=0 then 0 :: (f_a (y::xs) 1 0 0 0 [0] [0])
                                     elif let_n =1 then tab :: (f_a (y::xs) (colona+1) (tab+1) 1 0 ( tab :: list_int) list_if )
                                     else  (tab+1) :: (f_a (y::xs) (colona+1) (tab+1) 1 0 ( tab+1 :: list_int) list_if )
                                 |2-> (tab+1)::(f_a (y::xs) (colona+1) (tab+1) 0 (tab+1) list_int list_if )
                                 |3-> (tab+1)::(f_a (y::xs) (colona+1) (tab+1) 0 0 list_int (tab+1 :: list_if))
                                 |4-> match list_if with
                                          |[]->[0]
                                          |[z]->z::(f_a (y::xs) (colona+1) z 0 0 list_int [] ) 
                                          |z::zs->z::(f_a (y::xs) (colona+1) z 0 0 list_int zs )
                                 |5-> match list_if with 
                                          |[]->[0]
                                          |[z]->z::(f_a (y::xs) (colona+1) z 0 0 list_int [z])
                                          |z::zs-> if (f(y)=4 || f(y)=5) then z::(f_a (y::xs) (colona+1) tab 0 0 list_int (z::zs))
                                                   else z::(f_a (y::xs) (colona+1) tab 0 0 list_int (z::zs))
                                 |6-> match list_int with
                                          |[]->[0]   //non esiste
                                          |[z]->[0]  //non esiste
                                          |z::zs-> z::(f_a (y::xs) (colona+1)  tab 0 0 zs list_if )
                                 |7->(match_n+1) ::(f_a (y::xs) (colona+1) match_n 0 match_n list_int list_if )
                                 |_->0 :: (f_a (y::xs) 0 0 0 0 [] [])
                                  
                                          
// se non vuoi realizzare la versione avanzata, non modificarla
let split (w : int) (s : string) = split_lines s

// questa è la funzione principale da implementare correttamente sia per versione avanzata che per quella normale
let rec indent (lines : string list) =
    let l= f_a lines 0 0 0 0 [] []
    let rec abc string l =
         match (l,string) with
             | x::xs,s::ss -> (x,s):: abc ss xs
             |_->[]
    in abc lines l
    
    //(0, s) :: indent ss

